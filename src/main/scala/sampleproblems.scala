import scala.util.Random

package Solution {

object SampleProblems {
   private val probSquare = new Problem (4, List ((0, 1), (1, 2), (2, 3), (3, 0)), 2)
   val square = new CompleteSolution (probSquare, Vector (0, 2, 3, 1))
//   private val prob1 = new Problem (6,
//      List ((0, 4), (1, 2), (1, 3), (2, 5), (2, 4)),
//      3);
   private val probwscifi = // Watched fl sci-fi
      new Problem (40,
         List (
         (1, 2), (1, 3), (1, 4), (1, 5), (1, 7), (1, 8), (1, 13), (1,15), (1,19), (1,20),
         (2, 3), (2, 4), (2, 14), (2, 16), (2, 17),
         (3, 6), (3, 9), (3, 10), (3, 12), (3, 21),
         (4, 5), (4, 7), (4, 11), (4, 15),
         (5, 7), (5, 9), (5, 18), (5, 22),
         (6, 9), (6, 10), (6, 12), (6, 23), (6, 25),
         (7, 9), (8, 15), (8, 24), (8, 27), (9, 10), (10, 11), (11, 18), (11, 22),
         (12, 23), (13, 19), (13, 20), (13, 26), (14, 24), (14, 30), (16, 24), (16, 28),
         (17, 29), (17, 31), (18, 22), (18, 23), (21, 22), (23, 25), (23, 32), (23, 33),
         (24, 28), (26, 34), (26, 35), (27, 36), (28, 37), (29, 34), (29, 35), (30, 38),
         (32, 39), (34, 35), (39, 0)),
         20)

   private val probsmall = new Problem (12,
         List ((1,2), (1,3), (2,4), (2, 5), (3, 5), (3, 6), (5, 6), (5, 7), (6, 8), (6, 9),
            (6, 0), (7, 0), (9, 10), (9, 11), (11, 0), (1, 9)),
         6)

   val wscifi_deeper = new CompleteSolution (probwscifi,
      Vector (0, 30, 32, 38, 39, 1, 13, 15, 19, 20, 2, 14, 16, 24, 28, 3, 7, 9, 10, 21,
         4, 5, 11, 18, 22, 6, 12, 23, 25, 33, 8, 17, 27, 31, 36, 26, 29, 34, 35, 37))
   val wscifi = Solution.quickSol (probwscifi)
   val small = Solution.quickSol (probsmall)

   val prob1910 = new Problem (35, List(( 0 , 1 ),
( 0 , 2 ),
( 0 , 3 ),
( 0 , 4 ),
( 0 , 5 ),
( 0 , 6 ),
( 0 , 7 ),
( 0 , 8 ),
( 0 , 9 ),
( 0 , 10 ),
( 0 , 11 ),
( 0 , 12 ),
( 0 , 13 ),
( 0 , 14 ),
( 0 , 15 ),
( 0 , 16 ),
( 0 , 17 ),
( 0 , 18 ),
( 0 , 19 ),
( 0 , 20 ),
( 0 , 21 ),
( 0 , 22 ),
( 0 , 23 ),
( 0 , 24 ),
( 0 , 25 ),
( 0 , 26 ),
( 0 , 27 ),
( 0 , 28 ),
( 0 , 29 ),
( 0 , 30 ),
( 0 , 31 ),
( 0 , 32 ),
( 0 , 33 ),
( 1 , 2 ),
( 1 , 3 ),
( 1 , 4 ),
( 1 , 5 ),
( 1 , 6 ),
( 1 , 7 ),
( 1 , 8 ),
( 1 , 9 ),
( 1 , 10 ),
( 1 , 11 ),
( 1 , 12 ),
( 1 , 13 ),
( 1 , 14 ),
( 1 , 15 ),
( 1 , 16 ),
( 1 , 17 ),
( 1 , 18 ),
( 1 , 19 ),
( 1 , 20 ),
( 1 , 21 ),
( 1 , 22 ),
( 1 , 23 ),
( 1 , 24 ),
( 1 , 25 ),
( 1 , 26 ),
( 1 , 27 ),
( 1 , 28 ),
( 1 , 29 ),
( 1 , 30 ),
( 1 , 31 ),
( 1 , 32 ),
( 2 , 3 ),
( 2 , 4 ),
( 2 , 5 ),
( 2 , 6 ),
( 2 , 7 ),
( 2 , 8 ),
( 2 , 9 ),
( 2 , 10 ),
( 2 , 11 ),
( 2 , 12 ),
( 2 , 13 ),
( 2 , 14 ),
( 2 , 15 ),
( 2 , 16 ),
( 2 , 17 ),
( 2 , 18 ),
( 2 , 19 ),
( 2 , 20 ),
( 2 , 21 ),
( 2 , 22 ),
( 2 , 23 ),
( 2 , 24 ),
( 2 , 25 ),
( 2 , 26 ),
( 2 , 27 ),
( 2 , 28 ),
( 2 , 29 ),
( 2 , 30 ),
( 2 , 31 ),
( 2 , 32 ),
( 3 , 4 ),
( 3 , 5 ),
( 3 , 6 ),
( 3 , 7 ),
( 3 , 8 ),
( 3 , 9 ),
( 3 , 10 ),
( 3 , 11 ),
( 3 , 12 ),
( 3 , 13 ),
( 3 , 14 ),
( 3 , 15 ),
( 3 , 16 ),
( 3 , 17 ),
( 3 , 18 ),
( 3 , 19 ),
( 3 , 20 ),
( 3 , 21 ),
( 3 , 22 ),
( 3 , 23 ),
( 3 , 24 ),
( 3 , 25 ),
( 3 , 26 ),
( 3 , 27 ),
( 3 , 28 ),
( 3 , 29 ),
( 3 , 30 ),
( 3 , 31 ),
( 3 , 32 ),
( 4 , 5 ),
( 4 , 6 ),
( 4 , 7 ),
( 4 , 8 ),
( 4 , 9 ),
( 4 , 10 ),
( 4 , 11 ),
( 4 , 12 ),
( 4 , 13 ),
( 4 , 14 ),
( 4 , 15 ),
( 4 , 16 ),
( 4 , 17 ),
( 4 , 18 ),
( 4 , 19 ),
( 4 , 20 ),
( 4 , 21 ),
( 4 , 22 ),
( 4 , 23 ),
( 4 , 24 ),
( 4 , 25 ),
( 4 , 26 ),
( 4 , 27 ),
( 4 , 28 ),
( 4 , 29 ),
( 4 , 30 ),
( 4 , 31 ),
( 4 , 32 ),
( 5 , 6 ),
( 5 , 7 ),
( 5 , 8 ),
( 5 , 9 ),
( 5 , 10 ),
( 5 , 11 ),
( 5 , 12 ),
( 5 , 13 ),
( 5 , 14 ),
( 5 , 15 ),
( 5 , 16 ),
( 5 , 17 ),
( 5 , 18 ),
( 5 , 19 ),
( 5 , 20 ),
( 5 , 21 ),
( 5 , 22 ),
( 5 , 23 ),
( 5 , 24 ),
( 5 , 25 ),
( 5 , 26 ),
( 5 , 27 ),
( 5 , 28 ),
( 5 , 29 ),
( 5 , 30 ),
( 5 , 31 ),
( 5 , 32 ),
( 6 , 7 ),
( 6 , 8 ),
( 6 , 9 ),
( 6 , 10 ),
( 6 , 11 ),
( 6 , 12 ),
( 6 , 13 ),
( 6 , 14 ),
( 6 , 15 ),
( 6 , 16 ),
( 6 , 17 ),
( 6 , 18 ),
( 6 , 19 ),
( 6 , 20 ),
( 6 , 21 ),
( 6 , 22 ),
( 6 , 23 ),
( 6 , 24 ),
( 6 , 25 ),
( 6 , 26 ),
( 6 , 27 ),
( 6 , 28 ),
( 6 , 29 ),
( 6 , 30 ),
( 6 , 31 ),
( 6 , 32 ),
( 7 , 8 ),
( 7 , 9 ),
( 7 , 10 ),
( 7 , 11 ),
( 7 , 12 ),
( 7 , 13 ),
( 7 , 14 ),
( 7 , 15 ),
( 7 , 16 ),
( 7 , 17 ),
( 7 , 18 ),
( 7 , 19 ),
( 7 , 20 ),
( 7 , 21 ),
( 7 , 22 ),
( 7 , 23 ),
( 7 , 24 ),
( 7 , 25 ),
( 7 , 26 ),
( 7 , 27 ),
( 7 , 28 ),
( 7 , 29 ),
( 7 , 30 ),
( 7 , 31 ),
( 7 , 32 ),
( 8 , 9 ),
( 8 , 10 ),
( 8 , 11 ),
( 8 , 12 ),
( 8 , 13 ),
( 8 , 14 ),
( 8 , 15 ),
( 8 , 16 ),
( 8 , 17 ),
( 8 , 18 ),
( 8 , 19 ),
( 8 , 20 ),
( 8 , 21 ),
( 8 , 22 ),
( 8 , 23 ),
( 8 , 24 ),
( 8 , 25 ),
( 8 , 26 ),
( 8 , 28 ),
( 8 , 29 ),
( 9 , 10 ),
( 9 , 11 ),
( 9 , 12 ),
( 9 , 13 ),
( 9 , 14 ),
( 9 , 15 ),
( 9 , 16 ),
( 9 , 17 ),
( 9 , 18 ),
( 9 , 19 ),
( 9 , 20 ),
( 9 , 21 ),
( 9 , 22 ),
( 9 , 23 ),
( 9 , 24 ),
( 9 , 25 ),
( 9 , 26 ),
( 9 , 27 ),
( 9 , 34 ),
( 10 , 11 ),
( 10 , 12 ),
( 10 , 13 ),
( 10 , 14 ),
( 10 , 15 ),
( 10 , 16 ),
( 10 , 17 ),
( 10 , 18 ),
( 10 , 19 ),
( 10 , 20 ),
( 10 , 21 ),
( 10 , 22 ),
( 10 , 23 ),
( 10 , 24 ),
( 10 , 25 ),
( 10 , 26 ),
( 10 , 34 ),
( 11 , 12 ),
( 11 , 13 ),
( 11 , 14 ),
( 11 , 15 ),
( 11 , 16 ),
( 11 , 17 ),
( 11 , 18 ),
( 11 , 19 ),
( 11 , 20 ),
( 11 , 21 ),
( 11 , 22 ),
( 11 , 23 ),
( 11 , 24 ),
( 11 , 25 ),
( 11 , 26 ),
( 11 , 34 ),
( 12 , 13 ),
( 12 , 14 ),
( 12 , 15 ),
( 12 , 16 ),
( 12 , 17 ),
( 12 , 18 ),
( 12 , 19 ),
( 12 , 20 ),
( 12 , 21 ),
( 12 , 22 ),
( 12 , 23 ),
( 12 , 24 ),
( 12 , 25 ),
( 12 , 26 ),
( 12 , 34 ),
( 13 , 14 ),
( 13 , 15 ),
( 13 , 16 ),
( 13 , 17 ),
( 13 , 18 ),
( 13 , 19 ),
( 13 , 20 ),
( 13 , 21 ),
( 13 , 22 ),
( 13 , 23 ),
( 13 , 24 ),
( 13 , 25 ),
( 13 , 26 ),
( 13 , 34 ),
( 14 , 15 ),
( 14 , 16 ),
( 14 , 17 ),
( 14 , 18 ),
( 14 , 19 ),
( 14 , 20 ),
( 14 , 21 ),
( 14 , 22 ),
( 14 , 23 ),
( 14 , 24 ),
( 14 , 25 ),
( 14 , 26 ),
( 14 , 27 ),
( 15 , 16 ),
( 15 , 17 ),
( 15 , 18 ),
( 15 , 19 ),
( 15 , 20 ),
( 15 , 21 ),
( 15 , 22 ),
( 15 , 23 ),
( 15 , 24 ),
( 15 , 25 ),
( 15 , 26 ),
( 16 , 17 ),
( 16 , 18 ),
( 16 , 19 ),
( 16 , 20 ),
( 16 , 21 ),
( 16 , 22 ),
( 16 , 23 ),
( 16 , 24 ),
( 16 , 25 ),
( 16 , 26 ),
( 17 , 18 ),
( 17 , 19 ),
( 17 , 20 ),
( 17 , 21 ),
( 17 , 22 ),
( 17 , 23 ),
( 17 , 24 ),
( 17 , 25 ),
( 17 , 26 ),
( 18 , 19 ),
( 18 , 20 ),
( 18 , 21 ),
( 18 , 22 ),
( 18 , 23 ),
( 18 , 24 ),
( 18 , 25 ),
( 18 , 26 ),
( 19 , 20 ),
( 19 , 21 ),
( 19 , 22 ),
( 19 , 23 ),
( 19 , 24 ),
( 19 , 25 ),
( 19 , 26 ),
( 20 , 21 ),
( 20 , 22 ),
( 20 , 23 ),
( 20 , 24 ),
( 20 , 25 ),
( 20 , 26 ),
( 21 , 22 ),
( 21 , 23 ),
( 21 , 24 ),
( 21 , 25 ),
( 21 , 26 ),
( 22 , 23 ),
( 22 , 24 ),
( 22 , 25 ),
( 22 , 26 ),
( 23 , 24 ),
( 23 , 25 ),
( 23 , 26 ),
( 24 , 25 ),
( 24 , 26 ),
( 25 , 26 ),
( 27 , 28 ),
( 27 , 29 ),
( 27 , 30 ),
( 27 , 31 ),
( 27 , 32 ),
( 27 , 33 ),
( 28 , 29 ),
( 28 , 30 ),
( 28 , 31 ),
( 28 , 32 ),
( 29 , 30 ),
( 29 , 31 ),
( 29 , 32 ),
( 30 , 31 ),
( 30 , 32 ),
( 31 , 32 )), 5)
   val p1910s = Solution.quickSol (prob1910)

   val prob1920 = new Problem (24, List ((0,1), (0,3), (0,4), (0,5), (0,6), (0,7), (0,8),
      (0,9), (0,10), (0,11), (0,12), (0,13),
      (1,2), (1,5), (1,6), (1,7), (1,8), (1,9), (1,10), (1,11), (1,12), (1,13),
      (2,3), (2,4), (2,15), (2,16), (2,17), (2,18), (2,19), (2,20),
      (3,4), (3,15), (3,16), (3,17), (3,18), (3,21), (4,14), (4,22),
      (5,6), (5,7), (5,8), (5,9), (5,10), (5,11), (5,12), (5,13), (5,23),
      (6,7), (6,8), (6,9), (6,10), (6,11), (6,12), (6,13), (6,14),
      (7,8), (7,9), (7,10), (7,11), (7,12), (7,13),
      (8,9), (8,10), (8,11), (8,12), (8,13), (9,10), (9,11), (9,12), (9,13),
      (10,11), (10,12), (10,13), (11,12), (11,13), (12,13),
      (15,16), (15,17), (15,18), (15,19), (16,17), (16,18), (17,18), (19,20)), 8)
   val p1920s = Solution.quickSol (prob1920)

   val pre1930EdgeList = List ((0,1), (0,2), (0,3), (0,4), (0,5), (0,6), (0,7), (0,8), (0,9), (0,10), (0,11),
         (0,12), (0,13), (0,14), (0,15), (0,16), (0,17), (0,18), (0,19), (0,20), (0,21),
         (0,22), (0,23), (0,24), (0,25), (0,26), (0,27), (0,28), (1,2), (1,3), (1,4),
         (1,5), (1,6), (1,7), (1,8), (1,9), (1,10), (1,11), (1,12), (1,13), (1,14),
         (1,15), (1,16), (1,17), (1,18), (1,19), (1,20), (1,21), (1,22), (1,23),
         (1,24), (1,25), (1,26), (1,27), (2,3), (2,4), (2,5), (2,6), (2,7), (2,8), (2,9),
         (2,10), (2,11), (2,12), (2,13), (2,14), (2,15), (2,16), (2,17), (2,18), (2,19),
         (2,20), (2,21), (2,22), (2,23), (2,24), (2,25), (2,26), (2,27), (2,30), (2,31),
         (3,4), (3,5), (3,6), (3,7), (3,8), (3,9), (3,10), (3,11), (3,12), (3,13), (3,14),
         (3,15), (3,16), (3,17), (3,18), (3,19), (3,20), (3,21), (3,22), (3,23), (3,24),
         (3,25), (3,26), (3,27), (3,28), (4,5), (4,6), (4,7), (4,8), (4,9), (4,10), (4,11),
         (4,12), (4,13), (4,14), (4,15), (4,16), (4,17), (4,18), (4,19), (4,20), (4,21),
         (4,22), (4,23), (4,24), (4,25), (4,26), (4,27), (4,30), (4,32), (5,6), (5,7),
         (5,8), (5,9), (5,10), (5,11), (5,12), (5,13), (5,14), (5,15), (5,16), (5,17),
         (5,18), (5,19), (5,20), (5,21), (5,22), (5,23), (5,24), (5,25), (5,26), (5,27),
         (5,30), (6,7), (6,8), (6,9), (6,10), (6,11), (6,12), (6,13), (6,14), (6,15),
         (6,16), (6,17), (6,18), (6,19), (6,20), (6,21), (6,22), (6,23), (6,24), (6,25),
         (6,26), (6,27), (7,8), (7,9), (7,10), (7,11), (7,12), (7,13), (7,14), (7,15),
         (7,16), (7,17), (7,18), (7,19), (7,20), (7,21), (7,22), (7,23), (7,24), (7,25),
         (7,26), (7,27), (7,30), (8,9), (8,10), (8,11), (8,12), (8,13), (8,14), (8,15),
         (8,16), (8,17), (8,18), (8,19), (8,20), (8,21), (8,22), (8,23), (8,24), (8,25),
         (8,26), (8,27), (8,28), (8,29), (9,10), (9,11), (9,12), (9,13), (9,14), (9,15),
         (9,16), (9,17), (9,18), (9,19), (9,20), (9,21), (9,22), (9,23), (9,24), (9,25),
         (9,26), (9,27), (9,28), (9,33), (10,11), (10,12), (10,13), (10,14), (10,15),
         (10,16), (10,17), (10,18), (10,19), (10,20), (10,21), (10,22), (10,23), (10,24),
         (10,25), (10,26), (10,27), (10,31), (10,34), (10,35), (10,36), (10,37), (10,38),
         (10,39), (10,40), (10,41), (10,42), (10,43), (11,12), (11,13), (11,14), (11,15),
         (11,16), (11,17), (11,18), (11,19), (11,20), (11,21), (11,22), (11,23), (11,24),
         (11,25), (11,26), (11,27), (11,30), (12,13), (12,14), (12,15), (12,16), (12,17),
         (12,18), (12,19), (12,20), (12,21), (12,22), (12,23), (12,24), (12,25), (12,26),
         (12,27), (12,30), (12,44), (13,14), (13,15), (13,16), (13,17), (13,18), (13,19),
         (13,20), (13,21), (13,22), (13,23), (13,24), (13,25), (13,26), (13,27), (13,31),
         (13,34), (13,36), (13,37), (13,38), (13,39), (13,45), (14,15), (14,16), (14,17),
         (14,18), (14,19), (14,20), (14,21), (14,22), (14,23), (14,24), (14,25), (14,26),
         (14,27), (14,30), (15,16), (15,17), (15,18), (15,19), (15,20), (15,21), (15,22),
         (15,23), (15,24), (15,25), (15,26), (15,27), (15,31), (15,33), (15,34), (15,35),
         (15,36), (15,37), (15,38), (15,39), (15,45), (16,17), (16,18), (16,19), (16,20),
         (16,21), (16,22), (16,23), (16,24), (16,25), (16,26), (16,27), (16,31), (16,33),
         (16,34), (16,36), (16,37), (16,38), (16,39), (16,45), (17,18), (17,19), (17,20),
         (17,21), (17,22), (17,23), (17,24), (17,25), (17,26), (17,27), (18,19), (18,20),
         (18,21), (18,22), (18,23), (18,24), (18,25), (18,26), (18,27), (18,31), (18,33),
         (18,34), (18,35), (18,36), (18,37), (18,38), (18,39), (18,45), (19,20), (19,21),
         (19,22), (19,23), (19,24), (19,25), (19,26), (19,27), (19,33), (19,37), (19,38),
         (19,45), (20,21), (20,22), (20,23), (20,24), (20,25), (20,26), (20,27), (20,31),
         (20,34), (20,36), (20,37), (20,38), (20,39), (20,45), (21,22), (21,23), (21,24),
         (21,25), (21,26), (21,27), (21,31), (21,33), (21,34), (21,35), (21,36), (21,37),
         (21,38), (21,39), (21,45), (21,46), (22,23), (22,24), (22,25), (22,26), (22,27),
         (22,31), (22,34), (22,35), (22,36), (22,37), (22,38), (22,39), (22,45), (23,24),
         (23,25), (23,26), (23,27), (23,44), (24,25), (24,26), (24,27), (24,30), (25,26),
         (25,27), (25,30), (25,44), (26,27), (26,30), (26,31), (26,44), (27,30), (27,44),
         (28,29), (28,35), (28,40), (28,41), (28,42), (28,47), (28,48), (28,49), (28,50),
         (28,51), (29,35), (29,40), (29,41), (29,42), (29,47), (29,48), (29,49), (29,50),
         (29,51), (30,52), (30,53), (30,54), (31,34), (31,35), (31,36), (31,37), (31,38),
         (31,39), (31,43), (32,33), (32,47), (32,53), (32,61), (32,62), (33,38), (33,39),
         (33,45), (33,47), (33,53), (33,54), (33,55), (33,56), (33,57), (34,35), (34,36),
         (34,37), (34,38), (34,39), (34,45), (35,39), (35,40), (35,41), (35,42), (35,47),
         (35,48), (35,49), (35,50), (35,51), (35,61), (36,37), (36,38), (36,39), (36,45),
         (37,38), (37,39), (38,39), (38,45), (40,41), (40,42), (40,47), (40,48), (40,49),
         (40,50), (40,51), (41,42), (41,47), (41,48), (41,49), (41,50), (41,51), (42,47),
         (42,48), (42,49), (42,50), (42,51), (43,45), (43,54), (44,59), (44,60), (46,58),
         (47,48), (47,49), (47,50), (47,51), (48,49), (48,50), (48,51), (49,50), (49,51),
         (50,51), (51,53), (52,53), (53,54), (53,55), (53,56), (53,57), (54,55), (54,56),
         (54,57), (55,56), (55,57), (56,57), (56,63), (58,64), (58,65), (58,66), (58,67),
         (59,60), (63,68), (63,69), (64,65), (64,70), (65,66), (66,70), (67,70), (67,71),
         (68,69), (70,71));
   val probpre1930 = new Problem (72, pre1930EdgeList, 36)
   val pre1930_tight = new CompleteSolution (probpre1930,
      Vector (0, 1, 3, 5, 6, 8, 9, 17, 2, 4, 7, 11, 14, 24, 26, 30,
         10, 18, 31, 34, 36, 37, 38, 39, 12, 23, 25, 27, 44, 59, 60, 62,
         13, 15, 16, 19, 20, 21, 22, 45, 28, 40, 41, 42, 48, 49, 50, 51,
         29, 32, 35, 47, 61, 63, 68, 69, 33, 43, 52, 53, 54, 55, 56, 57,
         46, 58, 64, 65, 66, 67, 70, 71))
   val pre1930 = Solution.quickSol (probpre1930)

   def randomProblem (size : Int, density : Double, pageSize : Int, seed : Int) = {
      require (size > 0)
      require (pageSize > 0)
      require (size % pageSize == 0) // Takes care of size < pageSize case
      require (density >= 0.0 && density <= 1.0) // 0.0 and 1.0 are uninteresting but valid
      
      val r = new Random (seed)
      val edges = Range (0, size - 1).
         flatMap (x => Range (x + 1, size - 1).map ((x, _))).
         filter (_ => r.nextInt (4096) < (density * 4096).round).toList
      new Problem (size, edges, pageSize)
   }
}
}


